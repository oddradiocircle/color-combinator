// Script de diagn√≥stico para Color Combinator
console.log('üîç Iniciando diagn√≥stico...');

// Verificar el entorno de ejecuci√≥n
console.log('Verificando entorno de ejecuci√≥n:');
console.log('- Location:', window.location.href);
console.log('- Protocol:', window.location.protocol);
console.log('- CORS compatible:', window.location.protocol !== 'file:');

// Funci√≥n para inicializar manualmente la aplicaci√≥n usando la versi√≥n corregida
window.initApp = async function() {
  console.log('üöÄ Iniciando aplicaci√≥n manualmente con app-fix.js...');
  
  try {
    // Intentar cargar la versi√≥n corregida de la aplicaci√≥n
    const AppFixModule = await import('./js/app-fix.js');
    const { ColorCombinatorApp } = AppFixModule;
    
    if (!ColorCombinatorApp) {
      console.error('‚ùå No se pudo cargar la clase ColorCombinatorApp');
      return false;
    }
    
    // Crear e inicializar la aplicaci√≥n
    const app = new ColorCombinatorApp();
    const initResult = app.init();
    
    console.log('‚úÖ Aplicaci√≥n inicializada correctamente');
    return true;
  } catch (error) {
    console.error('‚ùå Error en la inicializaci√≥n manual:', error);
    console.error('Detalles del error:', error.message);
    console.error('Stack trace:', error.stack);
    return false;
  }
};

// Verificar si hay errores espec√≠ficos cargando los m√≥dulos b√°sicos
try {
  import('./js/config.js')
    .then(module => {
      console.log('‚úÖ M√≥dulo config.js cargado correctamente');
      
      // Intentar cargar los dem√°s m√≥dulos core en secuencia
      return import('./js/core/event-bus.js');
    })
    .then(module => {
      console.log('‚úÖ M√≥dulo event-bus.js cargado correctamente');
      return import('./js/core/service-locator.js');
    })
    .then(module => {
      console.log('‚úÖ M√≥dulo service-locator.js cargado correctamente');
      return import('./js/core/component.js');
    })
    .then(module => {
      console.log('‚úÖ M√≥dulo component.js cargado correctamente');
      
      // Verificar utils
      return import('./js/utils/dom-utils.js');
    })
    .then(module => {
      console.log('‚úÖ M√≥dulo dom-utils.js cargado correctamente');
      return import('./js/utils/color-utils.js');
    })
    .then(module => {
      console.log('‚úÖ M√≥dulo color-utils.js cargado correctamente');
      
      // Verificar componentes
      return import('./js/components/notification.js');
    })
    .then(module => {
      console.log('‚úÖ M√≥dulo notification.js cargado correctamente');
      
      // Verificamos elementos DOM cr√≠ticos
      const colorInputs = document.getElementById('color-inputs');
      console.log('Elemento color-inputs:', colorInputs ? '‚úÖ Encontrado' : '‚ùå No encontrado');
      const sidebar = document.getElementById('sidebar');
      console.log('Elemento sidebar:', sidebar ? '‚úÖ Encontrado' : '‚ùå No encontrado');
      
      console.log('Diagn√≥stico b√°sico completado. Si la aplicaci√≥n no funciona, usa el bot√≥n "Inicializar manualmente".');
    })
    .catch(error => {
      console.error('‚ùå Error al cargar m√≥dulos:', error);
      console.error('Mensaje de error:', error.message);
      console.error('Stack trace:', error.stack);
      console.log('Recomendaci√≥n: Usa el bot√≥n "Inicializar manualmente" para intentar cargar la versi√≥n corregida.');
    });
} catch (error) {
  console.error('‚ùå Error en el nivel superior:', error);
}

// Comprobaci√≥n de la estructura DOM
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOM completamente cargado');
  console.log('Elementos cr√≠ticos:');
  console.log('- color-inputs:', document.getElementById('color-inputs') ? '‚úÖ OK' : '‚ùå No encontrado');
  console.log('- sidebar:', document.getElementById('sidebar') ? '‚úÖ OK' : '‚ùå No encontrado');
  console.log('- notification-container:', document.getElementById('notification-container') ? '‚úÖ OK' : '‚ùå No encontrado');
  console.log('- main:', document.getElementById('main') ? '‚úÖ OK' : '‚ùå No encontrado');
});